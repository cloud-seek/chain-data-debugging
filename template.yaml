AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: SAM template for ChainDataDebuggingStack

Metadata:
  AWS::ServerlessRepo::Application:
    Name: chain-data-debugging
    Description: This AWS CDK project deploys a solution for moving records to more cost-efficient environments based on storage time. The main components include DynamoDB tables, Lambda functions, and IAM roles necessary to perform the operations.
    Author: Jordi Tanta
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['finops', 'storage', 'dynamo']
    HomePageUrl: https://github.com/cloud-seek/chain-data-debugging
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/cloud-seek/chain-data-debugging

Resources:
  StandardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StandardTable
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      TimeToLiveSpecification:
        AttributeName: TTLDate
        Enabled: true

  IATable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: IATable
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: OLD_IMAGE
      TimeToLiveSpecification:
        AttributeName: TTLDate
        Enabled: true

  LambdaTTLTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaTTLTriggerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaTTLTriggerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt StandardTable.Arn
                  - !GetAtt IATable.Arn
                  - !Join ["/", [!GetAtt StandardTable.Arn, "stream/*"]]
                  - !Join ["/", [!GetAtt IATable.Arn, "stream/*"]]
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TTLStandardTrigger:*"

  TTLStandardTrigger:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TTLStandardTrigger
      Handler: handlerST.ttlStandardTrigger
      Runtime: nodejs18.x
      CodeUri: lambda/
      Role: !GetAtt LambdaTTLTriggerRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: bucket-logs
          IATABLE_NAME: !Ref IATable
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt StandardTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Tags:
        FINOPS: XXX

  TTLStandardTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TTLStandardTrigger}"
      RetentionInDays: 14
      RemovalPolicy: Destroy

  LambdaTTLIARole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaTTLIARole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaTTLIAPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - s3:PutObject
                Resource:
                  - !GetAtt IATable.Arn
                  - !Join ["/", [!GetAtt IATable.Arn, "stream/*"]]
                  - !Sub "arn:aws:s3:::bucket-logs/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TTLIATrigger:*"

  TTLIATrigger:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TTLIATrigger
      Handler: handlerIA.ttlIATrigger
      Runtime: nodejs18.x
      CodeUri: lambda/
      Role: !GetAtt LambdaTTLIARole.Arn
      Environment:
        Variables:
          BUCKET_NAME: bucket-logs
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt IATable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Tags:
        FINOPS: XXX

  TTLIATriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TTLIATrigger}"
      RetentionInDays: 14
      RemovalPolicy: Destroy

Outputs:
  BucketName:
    Description: The name of the bucket
    Value: bucket-logs
